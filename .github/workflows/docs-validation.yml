name: Documentation Validation

on:
  push:
    branches: [ main ]
    paths: 
      - '*.md'
      - '.github/**/*.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths:
      - '*.md'
      - '.github/**/*.md' 
      - 'docs/**'
  schedule:
    # Weekly validation to catch external link changes
    - cron: '0 6 * * 1'

jobs:
  validate-links:
    name: Check Links and References
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js for link checking
        uses: actions/setup-node@v4
        with:
          node-js-version: '20'
          
      - name: Install markdown link checker
        run: npm install -g markdown-link-check
        
      - name: Check external links in documentation
        run: |
          echo "🔍 Checking external links in all Markdown files..."
          
          # Create config for link checker
          cat > .markdown-link-check.json << 'EOF'
          {
            "ignorePatterns": [
              { "pattern": "^http://localhost" },
              { "pattern": "^https://localhost" },
              { "pattern": "^http://127.0.0.1" },
              { "pattern": "^https://127.0.0.1" }
            ],
            "httpHeaders": [
              {
                "urls": ["https://github.com"],
                "headers": {
                  "User-Agent": "Mozilla/5.0 (compatible; Documentation Validator)"
                }
              }
            ],
            "timeout": "20s",
            "retryOn429": true,
            "retryCount": 3,
            "fallbackHttp2": false
          }
          EOF
          
          # Check all markdown files
          find . -name "*.md" -not -path "./node_modules/*" -exec markdown-link-check {} \;

  validate-consistency:
    name: Check Documentation Consistency  
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Get version from VERSION file
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT
        
      - name: Validate version consistency across docs
        run: |
          echo "📋 Validating version consistency across documentation..."
          VERSION="${{ steps.version.outputs.VERSION }}"
          
          # Check for outdated version references
          echo "Current version: v$VERSION"
          
          # Find any hardcoded version numbers that don't match
          echo "Checking for outdated version references..."
          OUTDATED=$(grep -r "v[0-9]\+\.[0-9]\+\.[0-9]\+" *.md | grep -v "v$VERSION" | grep -v "changelog.md" | grep -v "example" || true)
          
          if [ -n "$OUTDATED" ]; then
            echo "❌ Found potentially outdated version references:"
            echo "$OUTDATED"
            echo ""
            echo "These should reference v$VERSION or be in changelog.md"
            exit 1
          else
            echo "✅ All version references are current"
          fi
          
      - name: Check cross-references between documents
        run: |
          echo "🔗 Validating internal document cross-references..."
          
          # Check that referenced files exist
          MISSING_FILES=""
          
          # Extract referenced files from markdown links [text](file.md)
          for file in *.md .github/*.md; do
            if [ -f "$file" ]; then
              echo "Checking references in $file..."
              
              # Find markdown links to local files
              REFS=$(grep -o '\[.*\]([^)]*\.md[^)]*)' "$file" | sed 's/.*(\([^)]*\)).*/\1/' | sed 's/#.*//' || true)
              
              for ref in $REFS; do
                # Handle relative paths
                if [ ! -f "$ref" ] && [ ! -f ".github/$ref" ]; then
                  MISSING_FILES="$MISSING_FILES\n  $file -> $ref (missing)"
                fi
              done
            fi
          done
          
          if [ -n "$MISSING_FILES" ]; then
            echo "❌ Found references to missing files:"
            echo -e "$MISSING_FILES"
            exit 1
          else
            echo "✅ All internal document references are valid"
          fi
          
      - name: Validate documentation structure
        run: |
          echo "📁 Validating documentation structure and completeness..."
          
          # Required documentation files
          REQUIRED_FILES="readme.md CLAUDE.md AI_DEVELOPMENT_GUIDE.md contributing.md changelog.md SECURITY.md license"
          
          for file in $REQUIRED_FILES; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done
          
          # Check that README has required sections
          echo "Checking README.md structure..."
          REQUIRED_SECTIONS="Quick Install|Features|System Requirements|Troubleshooting|Version Information"
          
          for section in $(echo $REQUIRED_SECTIONS | tr '|' '\n'); do
            if ! grep -i "$section" readme.md > /dev/null; then
              echo "❌ README.md missing section: $section"
              exit 1
            else
              echo "✅ README.md has section: $section"
            fi
          done
          
      - name: Check for common documentation issues
        run: |
          echo "🔍 Checking for common documentation issues..."
          
          # Check for TODO/FIXME markers
          TODOS=$(grep -r "TODO\|FIXME\|XXX" *.md .github/*.md || true)
          if [ -n "$TODOS" ]; then
            echo "⚠️ Found TODO/FIXME markers in documentation:"
            echo "$TODOS"
          fi
          
          # Check for placeholder text
          PLACEHOLDERS=$(grep -r "lorem ipsum\|placeholder\|TODO\|TBD\|FIXME" *.md .github/*.md || true)
          if [ -n "$PLACEHOLDERS" ]; then
            echo "⚠️ Found placeholder text in documentation:"
            echo "$PLACEHOLDERS"
          fi
          
          # Check for broken internal anchors
          echo "Checking internal anchor links..."
          ANCHOR_ISSUES=$(grep -r "#[a-zA-Z]" *.md | grep -v "^#" | grep "](.*#" || true)
          if [ -n "$ANCHOR_ISSUES" ]; then
            echo "⚠️ Found internal anchor links (verify these work):"
            echo "$ANCHOR_ISSUES"
          fi
          
          echo "✅ Documentation validation complete"

  spelling-grammar:
    name: Spelling and Grammar Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install aspell
        run: sudo apt-get update && sudo apt-get install -y aspell aspell-en
        
      - name: Check spelling in documentation
        run: |
          echo "📝 Running spell check on documentation..."
          
          # Create custom dictionary for technical terms
          cat > .aspell-dict << 'EOF'
          Docker
          dockerfile
          docker-compose
          GitHub
          npm
          Node.js
          Ubuntu
          ARM64
          x86_64
          amd64
          aarch64
          Raspberry
          macOS
          Linux
          Debian
          Fedora
          CentOS
          Arch
          Manjaro
          TTY
          sudo
          QEMU
          Buildx
          CI/CD
          API
          JSON
          YAML
          CLI
          SDK
          EOF
          
          # Check spelling (allowing custom dictionary)
          for file in *.md; do
            if [ -f "$file" ]; then
              echo "Checking spelling in $file..."
              
              # Extract text content and check spelling
              # Remove code blocks and inline code first
              sed '/```/,/```/d' "$file" | \
              sed 's/`[^`]*`//g' | \
              aspell --mode=markdown --personal=./.aspell-dict list | \
              sort | uniq > "/tmp/misspelled-$file.txt"
              
              if [ -s "/tmp/misspelled-$file.txt" ]; then
                echo "⚠️ Potential spelling issues in $file:"
                cat "/tmp/misspelled-$file.txt"
                echo ""
              fi
            fi
          done
          
          echo "✅ Spell check complete"

  generate-report:
    name: Generate Validation Report
    runs-on: ubuntu-latest
    needs: [validate-links, validate-consistency, spelling-grammar]
    if: always()
    
    steps:
      - name: Generate documentation quality report
        run: |
          echo "## 📊 Documentation Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Link Validation | ${{ needs.validate-links.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Consistency Check | ${{ needs.validate-consistency.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY  
          echo "| Spelling/Grammar | ${{ needs.spelling-grammar.result == 'success' && '✅ Pass' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Validation Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY